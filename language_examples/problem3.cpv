# Pre declarations
# Multiplicação de matrizes no Haskell
# mmult a b = [[ sum $ zipWith (*) ar bc | bc <- (transpose b)] | ar <- a ]
#Crie um programa que leia duas matrizes numéricas e, quando possível, imprima
#a soma e o produto dessas matrizes. Caso uma operação não possa ser realizada
#para as matrizes lidas, imprima uma mensagem informando da impossibilidade.
# Pre declarations
Matrix matriz1; Matrix matriz2; Matrix matriz3;
List list1;
int i; int j;
int l1; int l2; int c1; int c2;
boolean somar; boolean mult;
int x;

begin program

somar = True; mult = True;

write "Matriz 1: Quantas linhas?\n";
read > l1;
write "Matriz 1: Quantas colunas?\n";
read > c1;
write "Matriz 2: Quantas linhas?\n";
read > l2;
write "Matriz 2: Quantas colunas?\n";
read > c2;

if (l1 != l2 or c1 != c2) {
  somar = False;
  write "Não é possível realizar a soma\n";
}
if (c1 != l2){
  mult = False;
  write "Não é possível realizar a multiplicação\n";
}
if (somar or mult) {
  write "Digite os ";
  write l1 * c1;
  write " valores da Matriz 1\n";
  i = 0; 
  while (i < l1) {
    list1 = [];
    j = 0;
    while (j < c1) {
      read > x;
      list1 = list1 ++ x;
      j = j + 1;
    }
    matriz1 = matriz1 ++ list1;
    i = i + 1;
  }
  write "Digite os ";
  write l2 * c2;
  write " valores da Matriz 2\n";
  i = 0;
  while (i < l2) {
    list1 = [];
    j = 0;
    while (j < c2) {
      read > x;
      list1 = list1 ++ x;
      j = j + 1;
    }
    matriz2 = matriz2 ++ list1;
    i = i + 1;
  }
  if (somar) {
    write "Soma de Matriz:\n";
    matriz3 = matriz1 + matriz2;
    write matriz3;
    write "\n";
  }
  if (mult) {
    write "Multiplicação de Matriz:\n";
    matriz3 = matriz1 * matriz2;
    write matriz3;
    write "\n";
  }
}

end program

